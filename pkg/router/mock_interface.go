// Code generated by mockery v1.0.0. DO NOT EDIT.

package router

import cipher "github.com/skycoin/dmsg/cipher"
import context "context"
import mock "github.com/stretchr/testify/mock"
import routing "github.com/skycoin/skywire/pkg/routing"

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// AcceptRoutes provides a mock function with given fields:
func (_m *MockInterface) AcceptRoutes() (*RouteGroup, error) {
	ret := _m.Called()

	var r0 *RouteGroup
	if rf, ok := ret.Get(0).(func() *RouteGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RouteGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *MockInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DialRoutes provides a mock function with given fields: ctx, rPK, lPort, rPort, opts
func (_m *MockInterface) DialRoutes(ctx context.Context, rPK cipher.PubKey, lPort routing.Port, rPort routing.Port, opts *DialOptions) (*RouteGroup, error) {
	ret := _m.Called(ctx, rPK, lPort, rPort, opts)

	var r0 *RouteGroup
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey, routing.Port, routing.Port, *DialOptions) *RouteGroup); ok {
		r0 = rf(ctx, rPK, lPort, rPort, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RouteGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey, routing.Port, routing.Port, *DialOptions) error); ok {
		r1 = rf(ctx, rPK, lPort, rPort, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
