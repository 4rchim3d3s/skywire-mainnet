// Code generated by mockery v1.0.0. DO NOT EDIT.

package app2

import mock "github.com/stretchr/testify/mock"
import network "github.com/skycoin/skywire/pkg/app2/network"

// MockServerRPCClient is an autogenerated mock type for the ServerRPCClient type
type MockServerRPCClient struct {
	mock.Mock
}

// Accept provides a mock function with given fields: lisID
func (_m *MockServerRPCClient) Accept(lisID uint16) (uint16, network.Addr, error) {
	ret := _m.Called(lisID)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(uint16) uint16); ok {
		r0 = rf(lisID)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 network.Addr
	if rf, ok := ret.Get(1).(func(uint16) network.Addr); ok {
		r1 = rf(lisID)
	} else {
		r1 = ret.Get(1).(network.Addr)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint16) error); ok {
		r2 = rf(lisID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CloseConn provides a mock function with given fields: id
func (_m *MockServerRPCClient) CloseConn(id uint16) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseListener provides a mock function with given fields: id
func (_m *MockServerRPCClient) CloseListener(id uint16) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dial provides a mock function with given fields: remote
func (_m *MockServerRPCClient) Dial(remote network.Addr) (uint16, error) {
	ret := _m.Called(remote)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(network.Addr) uint16); ok {
		r0 = rf(remote)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(network.Addr) error); ok {
		r1 = rf(remote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Listen provides a mock function with given fields: local
func (_m *MockServerRPCClient) Listen(local network.Addr) (uint16, error) {
	ret := _m.Called(local)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(network.Addr) uint16); ok {
		r0 = rf(local)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(network.Addr) error); ok {
		r1 = rf(local)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: connID, b
func (_m *MockServerRPCClient) Read(connID uint16, b []byte) (int, []byte, error) {
	ret := _m.Called(connID, b)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint16, []byte) int); ok {
		r0 = rf(connID, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(uint16, []byte) []byte); ok {
		r1 = rf(connID, b)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint16, []byte) error); ok {
		r2 = rf(connID, b)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Write provides a mock function with given fields: connID, b
func (_m *MockServerRPCClient) Write(connID uint16, b []byte) (int, error) {
	ret := _m.Called(connID, b)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint16, []byte) int); ok {
		r0 = rf(connID, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint16, []byte) error); ok {
		r1 = rf(connID, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
